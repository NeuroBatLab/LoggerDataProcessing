function mat2ntt(OutputPath)
if nargin<1
    error('please provide the path to the files containing\nthe snippets and spike arrival time generated by extract_logger_data\n');
end
Snippets_file = dir(fullfile(OutputPath, 'Tetrode_spikes_snippets*'));
SpikeTimes_file = dir(fullfile(OutputPath, 'Tetrode_spikes_time*'));


Num_tetrodes = length(Snippets_file);
for Tetrode_i=1:Num_tetrodes % for each of the electrode bundles, eg. tetrodes
    load(fullfile(SpikeTimes_file(Tetrode_i).folder, SpikeTimes_file(Tetrode_i).name), 'Spike_arrival_times');
    load(fullfile(Snippets_file(Tetrode_i).folder, Snippets_file(Tetrode_i).name), 'Snippets');
    TetrodeID = SpikeTimes_file(Tetrode_i).name(end-4);
    if ~isempty(Spike_arrival_times) % check if the electrode bundle has no spikes (eg. if all its channels are inactive)
        % Saving the time stamps and waveforms of spikes in Nlx .ntt format
        disp(['Saving spikes from tetrode '  TetrodeID '...'])
        % The following works with the current version of Mat2NlxSpike (Version
        % 6.0.0) as of this writing (7/13/2016).
        NTT_Filename=fullfile(OutputPath,['TT'  TetrodeID '.ntt']);
        AppendToFileFlag=0; % save new file, or overwrite existing file, but do not append to existing file
        ExportMode=1; % export all spikes
        ExportModeVector=[]; % don't need this when exporting all spikes
        FieldSelectionFlags=[1 0 1 0 1 1]; % whether or not to export: time stamps, spike channel numbers, the clusters that spikes are assigned to, spike features, spike waveforms, and header
        cluster_numbers=zeros(1,length(Spike_arrival_times)); % zero means that the corresponding spike is not assigned to any cluster; we have to do this because Mat2NlxSpike 6.0.0 has a bug: if this input is omitted, all spikes are incorrectly assigned to clusters
        
        % To pan the 2D view in SpikeSort3D, "-ADMaxValue 32767" must
        % be in the header; to ensure that the voltage axis has
        % reasonable scales when using "shift + right click" to preview
        % waveforms in SpikeSort3D, we have to scale the waveforms up
        % as follows
        ADBitVolts=500/(32767*10^6); % 32767 is the largest number that can be represented as a signed 16-bit integer, which SpikeSort3D requires to be mapped to the upper bound of the voltage data, which we have picked to be 500 uV here, so that the voltage axis during preview has reasonable scales
        Waveforms_to_export_AD_counts=round(Snippets./(ADBitVolts*10^6)); % the AD counts here, multiplied by the "ADBitVolts" factor above, equals voltages in V
        NTT_header={'######## Neuralynx Data File Header';'-ADMaxValue 32767';['-ADBitVolts ' sprintf('%.24f',ADBitVolts) ' ' sprintf('%.24f',ADBitVolts) ' ' sprintf('%.24f',ADBitVolts) ' ' sprintf('%.24f',ADBitVolts)]}; % the string repetitions of "ADBitVolts" are for the different channels; the number is saved into the header with 24 digits after the decimal point, as the Neuralynx recording system does; note that this does no round to the 24th digit after the decimal point, which is OK when "ADBitVolts" is 500/(32767*10^6), but needs to be checked if a different voltage upper bound is used
        
        Mat2NlxSpike(NTT_Filename,AppendToFileFlag,ExportMode,ExportModeVector,FieldSelectionFlags,Spike_arrival_times',cluster_numbers,Waveforms_to_export_AD_counts,NTT_header)
        % Note that if the time stamp and waveform inputs to Mat2NlxSpike
        % (6.0.0) are in certain integer formats, Mat2NlxSpike cannot correctly
        % save them, even though the .NTT file saves the waveforms and time
        % stamps in integer data formats. Thus, "timestamps_usec" and
        % "spike_waveforms" here are integers in the "double" format.
    end
end
end