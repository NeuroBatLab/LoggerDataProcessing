function phy2ssmat(InputPath, OutputPath)
% this function expect that the original CSC files are sitting in
% 'extracted_data' folder at the same level as InputPath
addpath(genpath('/Users/elie/Documents/CODE/Kilosort2_Tetrode'))
addpath(genpath('/Users/elie/Documents/CODE/npy-matlab'))

%% Massage input
%Hard coded input:
Num_EperBundle = 4; % We work with tetrodes
TimeStep = 20*60*10^6;% Time Step of 30 min for the calculation of the time varying spike sorting quality measures
DebugFig = 1; % Set to 1 to see figures of spike sorting quality.
BandPassFilter = [600 6000];% Bandpass parameters for the input raw voltage


% Deal with input variables
if nargin<1
    error('please provide the path to the files containing\nthe snippets and spike arrival time generated by Phy\n');
end

% Get the folder containing the raw data as extracted by extract_logger_data.m
[Root,~]=fileparts(InputPath);
Data_folder = fullfile(Root, 'extracted_data');

if nargin<2
    OutputPath = Data_folder;
    fprintf(1, 'No outputpath indicated, data will be saved under the raw data folder:\n%s\n', OutputPath);
else
    fprintf(1, 'Converted files will be saved under:\n%s\n', OutputPath);
end



%% Load data
% Load the data output after currating the data with Phy
params.excludeNoise = true;
params.loadPCs = false;
SpikeStruct = loadKSdir(InputPath, params);

% Get the info of that recording
BatID = SpikeStruct.dat_path(1:5);
Date = SpikeStruct.dat_path(7:14);
NTemplatePoints = size(SpikeStruct.temps,2);
NChannels = size(SpikeStruct.temps,3);

% BandPass filter for the raw data
[b,a]=butter(6,BandPassFilter/(SpikeStruct.sample_rate/2),'bandpass');

%% Loop through each SU or MU and save data
UnitClusters = SpikeStruct.cids;
UnitClustersQ = SpikeStruct.cgs;
Nunits = length(UnitClusters);
Qlabel = {'M','S','U'}; % M: multi-unit, S: single unit, U: Unsorted or Uncertain between noise or unit
for uu=1:Nunits
    fprintf(1, 'Processing unit %d/%d\n', uu, Nunits);
    ClustID = UnitClusters(uu);
    ClustQ = Qlabel{SpikeStruct.cgs(uu)};
    SpikeTemplatesID = SpikeStruct.spikeTemplates(SpikeStruct.clu == ClustID);
    SpikePosition_local = SpikeStruct.ss(SpikeStruct.clu == ClustID);
    
    % find on which channel this unit was detected
    Utemplates = unique(SpikeTemplatesID);
    fprintf(1, '%d templates for that unit\n', length(Utemplates));
    ChannelID = nan(length(Utemplates),1);
    Templates = cell(length(Utemplates),1);
    if uu==1
        FIG = figure();
        pause()
        ColorCode = get(groot,'DefaultAxesColorOrder');
    end
    if length(Utemplates)>6 && ~exist('FIGbis','var')
        FIGbis = figure();
        pause()
    end
    if length(Utemplates)>12 && ~exist('FIGter','var')
        FIGter = figure();
        pause()
    end
    if length(Utemplates)>18 && ~exist('FIGqua','var')
        FIGqua = figure();
        pause()
    end
    for tt=1:length(Utemplates)
        Templates{tt} = squeeze(SpikeStruct.temps(Utemplates(tt),:,:));
        AmpTemplate = max(Templates{tt}) - min(Templates{tt});
        [~,ChannelID(tt)] = max(AmpTemplate);
        
        if tt<7
            set(0,'CurrentFigure', FIG)
            subplot(3,2,tt)
        elseif tt<13
            set(0,'CurrentFigure', FIGbis)
            subplot(3,2,tt-6)
        elseif tt<19
            set(0,'CurrentFigure', FIGter)
            subplot(3,2,tt-12)
        else
            set(0,'CurrentFigure', FIGqua)
            subplot(3,2,tt-18)
        end
        
        
        for cc=1:NChannels
            if cc<5
                plot(Templates{tt}(:,cc), 'LineWidth',2, 'Color',ColorCode(cc,:))
            elseif cc<9
                plot(Templates{tt}(:,cc), 'LineWidth',2,'LineStyle','--','Color',ColorCode(cc-4,:))
            elseif cc<13
                plot(Templates{tt}(:,cc), 'LineWidth',2,'LineStyle','-.', 'Color',ColorCode(cc-8,:))
            else
                plot(Templates{tt}(:,cc), 'LineWidth',2,'LineStyle',':', 'Color',ColorCode(cc-12,:))
            end
            hold on
        end
        hold off
%         if length(Utemplates)>1 && tt==length(Utemplates)
%             legend('location', 'SouthOutside', 'NumColumns',2)
%         elseif length(Utemplates)==1
%             legend('location', 'SouthOutside', 'NumColumns',2)
%         end
        ChannT = mod(ChannelID(tt),4);
        if ~ChannT
            ChannT=4;
        end
        title(sprintf('Template %d max on Channel %d, TT%dC%d', tt, ChannelID(tt),ceil(ChannelID(tt)/4),ChannT));
    end
    
    UChannelID = unique(ChannelID);
    if length(UChannelID)>1
        warning('This unit is formed by spikes that were detected by %d templates belonging to different channels (see below)\n Channel %d is taken as a reference for spike arrival times calculations\n', length(Utemplates),UChannelID(1))
        UChannelID
        UChannelID = UChannelID(1); % even if the unit is constituted from templates that are max on different channels, only take the first one as a reference
    end
    
    % determine to which tetrode that channel belonged and the associated
    % channels
    TetrodeID = find(UChannelID<=Num_EperBundle:Num_EperBundle:NChannels,1,'first');
    Bundle_channels = (TetrodeID-1)*Num_EperBundle + (1:Num_EperBundle);
    
    % Calculate spike arrival time in transceiver time from SpikeStruct, in
    % microseconds (Spike_arrival_times)
    FileDir = dir(fullfile(Data_folder,sprintf('*CSC%d.mat', UChannelID-1)));
    Filename=fullfile(FileDir.folder,FileDir.name);
    % Convert the indices of spike arrival times to real
    % time since we can load the info regarding time of file
    % onsets, and the sample frequency.
    load(Filename, 'Indices_of_first_and_last_samples');
    Num_spikes=length(SpikePosition_local);
    load(Filename, 'Estimated_channelFS_Transceiver');
    FS = nanmean(Estimated_channelFS_Transceiver);
    load(Filename, 'Timestamps_of_first_samples_usec');
    Spike_arrival_times=round(get_timestamps_for_Nlg_voltage_samples(SpikePosition_local,Indices_of_first_and_last_samples(:,1)',Timestamps_of_first_samples_usec,10^6/FS));% the time stamps of all the detected spikes, rounded to integer microseconds; note that these are the time stamps of the last channel on this electrode bundle, which differ from the time stamps on the other channels of this electrode bundle by a few sampling periods of the Nlg AD converter
      
    % For all channels of the bundle (tetrode), collect the spike snippets
    fprintf(1, 'Collecting snippets\n')
    Spike_snippets=zeros(NTemplatePoints,Num_EperBundle,Num_spikes);
    FileID = fopen(fullfile(InputPath, SpikeStruct.dat_path));
    for spike_i=1:Num_spikes
        if ~mod(spike_i,round(Num_spikes/10))
            fprintf(1, '%d Percent\n',spike_i/round(Num_spikes/10)*10);
        end
        fseek(FileID,(SpikePosition_local(spike_i) - NTemplatePoints)*NChannels*2,-1);
        Data = fread(FileID,[NChannels NTemplatePoints*3], '*int16','l');
        Voltage_Trace = double(Data(Bundle_channels,:));
        for channel_i=1:length(Bundle_channels)
            Filtered_voltage_trace = filtfilt(b,a,Voltage_Trace(channel_i,:));
            Spike_snippet = Filtered_voltage_trace(NTemplatePoints/2+(1:NTemplatePoints))';
            Spike_snippets(:,channel_i,spike_i)= Spike_snippet; % save the waveforms of the current spike (units are uV)
        end
    end
    Mat_Filename = fullfile(OutputPath,sprintf('%s_%s_TT%d_SS%s_%d.mat',BatID, Date,TetrodeID,ClustQ,ClustID));
    save(Mat_Filename, 'Spike_arrival_times', 'SpikeTemplatesID', 'Spike_snippets', 'Templates', 'ChannelID','UChannelID')
    
    savefig(FIG,fullfile(OutputPath,sprintf('%s_%s_TT%d_SS%s_%d_template.fig',BatID, Date,TetrodeID,ClustQ,ClustID)))
    print(FIG,fullfile(OutputPath,sprintf('%s_%s_TT%d_SS%s_%d_template.pdf',BatID, Date,TetrodeID,ClustQ,ClustID)),'-dpdf','-fillpage')
    clf(FIG)
    if length(Utemplates)>6
        savefig(FIGbis,fullfile(OutputPath,sprintf('%s_%s_TT%d_SS%s_%d_templatebis.fig',BatID, Date,TetrodeID,ClustQ,ClustID)))
        print(FIGbis,fullfile(OutputPath,sprintf('%s_%s_TT%d_SS%s_%d_templatebis.pdf',BatID, Date,TetrodeID,ClustQ,ClustID)),'-dpdf','-fillpage')
        clf(FIGbis)
    end
    if length(Utemplates)>12
        savefig(FIGter,fullfile(OutputPath,sprintf('%s_%s_TT%d_SS%s_%d_templateter.fig',BatID, Date,TetrodeID,ClustQ,ClustID)))
        print(FIGter,fullfile(OutputPath,sprintf('%s_%s_TT%d_SS%s_%d_templateter.pdf',BatID, Date,TetrodeID,ClustQ,ClustID)),'-dpdf','-fillpage')
        clf(FIGter)
    end
    if length(Utemplates)>18
        savefig(FIGqua,fullfile(OutputPath,sprintf('%s_%s_TT%d_SS%s_%d_templatequa.fig',BatID, Date,TetrodeID,ClustQ,ClustID)))
        print(FIGqua,fullfile(OutputPath,sprintf('%s_%s_TT%d_SS%s_%d_templatequa.pdf',BatID, Date,TetrodeID,ClustQ,ClustID)),'-dpdf','-fillpage')
        clf(FIGqua)
    end
end


end
